from random import random
from dotenv import load_dotenv
import os
from flask_jwt_extended import jwt_required, get_jwt_identity, create_access_token, get_jwt
import requests
import spotipy
from spotipy.oauth2 import SpotifyOAuth
from flask import redirect, session, request, jsonify
from flask_cors import CORS

from ..middleware import auth
from ..models import get_user_from_token, filter_popular
from flask_restx import Namespace, Resource

from ..models import add_jwt, link_spotify

# Load environment variables from .env file
load_dotenv()

# Define a namespace for Spotify-related routes
spotify_ns = Namespace("spotify", description="Spotify API routes")

# Spotify API credentials and redirect URI
CLIENT_ID = os.getenv("SP_CLIENT_ID")
CLIENT_SECRET = os.getenv("SP_CLIENT_SECRET")
redirect_uri = "http://localhost:8000/api/spotify/callback"

# Define the required Spotify API scopes
scopes = "user-read-email playlist-read-private playlist-read-collaborative, playlist-modify-public playlist-modify-private"

# Initialize Spotify OAuth object
sp_oauth = SpotifyOAuth(client_id=CLIENT_ID, client_secret=CLIENT_SECRET,
                        redirect_uri=redirect_uri, scope=scopes)


@spotify_ns.route("/")
class HelloWorld(Resource):
    # A simple test route to verify the API is working
    def get(self):
        return "hello world! :)"


@spotify_ns.route("/recommend")
class RecommendRoute(Resource):
    @auth
    def get(user, self):
        print("HERE")
        # Using Reccobeats API instead of Spotify recommendations since its deprecated :/
        # It doesn't give great recommendations, but it gives something... so that's nice

        # Get seed parameters from the query string
        seed_tracks = request.args.get("seed_tracks", "")
        if not seed_tracks:
            return jsonify({"error": "Seed tracks are required"}), 400

        # Construct the external API URL
        url = f"https://api.reccobeats.com/v1/track/recommendation?size=100&seeds={seed_tracks}"

        print(url)

        # Define headers and payload for the external API request
        payload = {}
        headers = {
            'Accept': 'application/json'
        }

        try:
            # Make the external API request
            response = requests.get(url, headers=headers, data=payload)
            response.raise_for_status()  # Raise an exception for HTTP errors

            # Parse the response JSON
            response_data = response.json()

            # Filter popular tracks using the `filter_popular` function
            response_data_popular = list(
                filter(filter_popular, response_data.get("content", []))
            )

            # Extract IDs from the filtered data
            ids = [track.get("href").split("/")[-1]
                   for track in response_data_popular if "href" in track]
            # Convert the list of IDs to a comma-separated string
            ids_string = ",".join(ids)

            # Return the IDs and the filtered data
            return jsonify({
                "recommendations": response_data_popular,
                "ids": ids_string
            })
        except requests.exceptions.RequestException as e:
            # Handle HTTP request errors
            print(f"Error fetching recommendations: {e}")
            return jsonify({"error": "Failed to fetch recommendations"}), 500
        except Exception as e:
            # Handle general errors
            print(f"Unexpected error: {e}")
            return jsonify({"error": "An unexpected error occurred"}), 500


@spotify_ns.route("/create_playlist")
class CreatePlaylist(Resource):
    def post(self):
        # Parse the request body
        data = request.get_json()
        print(data)
        tracks = data.get("track_ids")
        if not tracks:
            return {"error": "No track IDs provided"}, 400

            # Retrieve the Spotify access token from the session
        access_token = session.get("spotify_access_token")
        if not access_token:
            return {"msg": "Token not found"}, 401

        try:
            print("Started TRY")
            # Initialize Spotify client
            sp = spotipy.Spotify(auth=access_token)
            print("Connected to Spotify")
            # Get the current user's Spotify ID
            user_id = sp.current_user()["id"]
            print("Got user id")
            # Create a new playlist
            playlist_name = f"Generated Playlist"
            playlist_description = "A playlist generated by the app"
            playlist = sp.user_playlist_create(
                user=user_id,
                name=playlist_name,
                description=playlist_description,
                public=False
            )
            print("Created Playlist")

            # Add tracks to the playlist
            track_uris = [f"spotify:track:{track}" for track in tracks]
            sp.playlist_add_items(playlist_id=playlist["id"], items=track_uris)
            print("added to playlist")
            # Return a success message with playlist details
            return {
                "message": "Playlist created successfully!",
                "playlist_id": playlist["id"],
                "playlist_name": playlist_name,
                "playlist_description": playlist_description
            }, 201
        except spotipy.exceptions.SpotifyException as e:
            # Handle Spotify API errors
            print(f"Spotify API error: {e}")
            return {"error": "Failed to create playlist"}, 500
        except Exception as e:
            # Handle general errors
            print(f"Unexpected error: {e}")
            return {"error": "An unexpected error occurred"}, 500


@spotify_ns.route("/me_playlists")
class MePlaylists(Resource):
    def get(self):
        # Retrieve the user's token from the session
        token = session.get("token")
        user = get_user_from_token(token)

        # Retrieve the Spotify access token from the user object
        access_token = user["spotify_token"]
        if not access_token:
            return jsonify({"msg": "Token not found"}), 401

        # Fetch the user's playlists from Spotify
        sp = spotipy.Spotify(auth=access_token)
        results = sp.current_user_playlists()
        return jsonify(results)


@spotify_ns.route("/playlist/<string:playlist_id>/tracks")
class PlaylistTracks(Resource):
    def get(self, playlist_id):
        # Retrieve the Spotify access token from the session
        access_token = session.get("spotify_access_token")
        if not access_token:
            return jsonify({"msg": "Token not found"}), 401

        # Fetch the tracks in the specified playlist
        sp = spotipy.Spotify(auth=access_token)
        results = sp.playlist_items(playlist_id)
        return jsonify(results)


@spotify_ns.route("/login")
class SpotifyLogin(Resource):
    def get(self):
        # Generate the Spotify authorization URL
        auth_url = sp_oauth.get_authorize_url()
        return redirect(auth_url)


@spotify_ns.route("/callback")
class SpotifyCallback(Resource):
    def get(self):
        # Retrieve the authorization code from the query string
        code = request.args.get("code")
        print(code)
        if not code:
            return jsonify({"msg": "Authorization failed"}), 400

        # Exchange the authorization code for an access token
        token_info = sp_oauth.get_access_token(code)
        print(token_info)
        access_token = token_info["access_token"]

        # Fetch the user's Spotify account information
        sp = spotipy.Spotify(auth=access_token)
        user_info = sp.current_user()
        spotify_id = user_info.get("id")

        # Retrieve the user's token from the session
        token = session.get("token")

        # Link the Spotify account to the user's profile
        link_spotify(token, spotify_id, access_token)

        # Redirect the user to the recommendations page
        return redirect(f"http://localhost:8080/recommend")


@spotify_ns.route("/link-spotify")
class LinkSpotifyRoute(Resource):
    @jwt_required()
    def get(self):
        # Redirect the user to the Spotify login page
        return redirect("/api/spotify/login")
